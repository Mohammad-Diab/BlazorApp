<tr>
    @if (Parent.EditAbility || Parent.GridType != GridType.Edit)
    {
        <td class="align-middle">
            <div title="Select '@Item.FullName'" class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input rowCheckbox" id="check-item-row-@Id" @bind="@IsSelected">
                <label class="custom-control-label" for="check-item-row-@Id"></label>
            </div>
        </td>
    }
    <td class="align-middle">@Item.Id</td>
    <td class="align-middle">@Item.Username</td>
    <td class="align-middle">@Item.FullName</td>
    <td class="align-middle">@Item.Birthday.ToString("yyyy MMM dd")</td>
    <td class="align-middle">@Item.Email</td>
    <td class="align-middle">@Item.Phone</td>
    @if (Parent.GridType == GridType.Edit)
    {
        <td>
            @if (Parent.EditAbility)
            {
                <div class="btn-group">
                    <button class="btn btn-info" @onclick="() => Parent.ShowEditModal(Item, Item.Id.ToString(), Item.FullName)">
                        <span class="oi oi-pencil"></span>
                    </button>

                    <button class="btn btn-danger" @onclick="() => Parent.ShowDeleteModal(Item, Item.FullName)">
                        <span class="oi oi-delete"></span>
                    </button>
                </div>
            }
            else
            {
                <code>no_actions_avialable</code>
            }

        </td>
    }
</tr>

@code {
    /// <summary>
    /// User Item to be rendered in the grid.
    /// </summary>
    [Parameter] public User Item { get; set; }

    /// <summary>
    /// Reference to the parent Grid.
    /// </summary>
    [CascadingParameter(Name = "UpdateModal")] public GenericList<User> Parent { get; set; }

    // HTML Static It of this field.
    string Id = Guid.NewGuid().ToString();

    /// <summary>
    /// Current user checkbox value whether it's selected or not. This allows us to do some actions when text changed and binded.
    /// </summary>
    bool IsSelected
    {
        get
        {
            return Parent.IsSelected(Item);
        }
        set
        {
            if (value)
            {
                // Add current Item to parent Grid's Selected List.
                Parent.AddItemToSelectedList(Item);
            }
            else
            {
                // Remove current Item from parent Grid's Selected List.
                Parent.RemoveItemFromSelectedList(Item);
            }
        }
    }
}