<tr>
    @if (Parent.EditAbility || Parent.GridType != GridType.Edit)
    {
        <td class="align-middle">
            <div title="Select '@Item.FullName'" class="custom-control custom-checkbox">
                <input type="checkbox" class="custom-control-input rowCheckbox" id="check-item-row-@Id" @bind="@IsSelected">
                <label class="custom-control-label" for="check-item-row-@Id"></label>
            </div>
        </td>
    }
    <td class="align-middle">@Item.Id</td>
    <td class="align-middle">@Item.Username</td>
    <td class="align-middle">@Item.FullName</td>
    <td class="align-middle">@Item.Birthday.ToString("yyyy MMM dd")</td>
    <td class="align-middle">@Item.Email</td>
    <td class="align-middle">@Item.Phone</td>
    @if (Parent.GridType == GridType.Edit)
    {
        <td>
            @if (Parent.EditAbility)
            {
                <div class="btn-group">
                    <button class="btn btn-info" @onclick="() => Parent.ShowEditModal(Item, Item.Id.ToString(), Item.FullName)">
                        <span class="oi oi-pencil"></span>
                    </button>

                    <button class="btn btn-danger" @onclick="() => Parent.ShowDeleteModal(Item, Item.FullName)">
                        <span class="oi oi-delete"></span>
                    </button>
                </div>
            }
            else
            {
                <code>no_actions_avialable</code>
            }

        </td>
    }
</tr>

@code {
        [Parameter] public User Item { get; set; }
        [CascadingParameter(Name = "UpdateModal")] public GenericList<User> Parent { get; set; }
        string Id;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Id = Guid.NewGuid().ToString();
    }

    bool IsSelected
    {
        get
        {
            return Parent.IsSelected(Item);
        }
        set
        {
            if (value)
            {
                Parent.AddItemToSelectedList(Item);
            }
            else
            {
                Parent.RemoveItemFromSelectedList(Item);
            }
        }
    }

    void ToggleCheckbox(bool? isChecked = null)
    {
        Console.WriteLine("Hid");
        if(isChecked.HasValue)
        {
            //Item.IsSelected = isChecked.Value;
        }
        else
        {
            //Item.IsSelected = !Item.IsSelected;
            //Parent.SelectChange(Item.Id, Item.IsSelected);
        }
    }

    //[Parameter] public EventCallback<User> DeleteUser { get; set; }
    //[Parameter] public Action<User, string, string> EditUser { get; set; }

    //[CascadingParameter(Name = "UpdateModal")] public UpdateModal<User> EditModal { get; set; }
    //[CascadingParameter(Name = "ConfirmDialog")] public ConfirmDialog ConfirmModal { get; set; }


    //async void ShowEditModal()
    //{
    //    await EditModal.ShowModal($"Edit '{Item.Username}'", DialogMode.Edit, Item.Id.ToString(), Item);
    //}

    //async Task DeleteItem()
    //{
    //    DialogResult result = await ConfirmModal.ShowModal($"Deleting {Item.FullName}", $"Do you really want to delete '{Item.FullName}'", ConfirmType.Delete);
    //    Console.WriteLine(result.ToString());
    //}
}