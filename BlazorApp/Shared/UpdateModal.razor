@typeparam T

<div class="modal @(IsShown ? "show d-block" : "")" tabindex="-1" role="dialog">
    <div style="z-index: unset;" class="modal-backdrop @(IsShown ? "show" : "d-none")" @onclick="FocusModal"></div>
    <div class="modal-dialog modal-lg @animateClassName animate__animated" role="document">
        <div class="modal-content animate__animated animate__fast @FocusClassName">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@ModalTitle</h5>
                <button type="button" class="close" @onclick="Cancel" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger d-none" role="alert">
                    This is a primary alert—check it out!
                </div>
                @if (Properties != null)
                {
                    @for (int i = 0; i < Properties.Count; i += 2)
                    {
                        int index = i;
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <DataInput Item="Properties[index]"></DataInput>
                            </div>

                            @if (index + 1 < Properties.Count)
                            {
                                <div class="col-md-6 mb-3">
                                    <DataInput Item="Properties[index + 1]"></DataInput>
                                </div>
                            }
                        </div>
                    }
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Close</button>
                <button type="button" class="btn btn-primary" @onclick="Confirm">@ConfirmButtonText</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] public List<Property> Properties { get; set; }
    [Parameter] public T ItemType { get; set; }
    string ModalTitle { get; set; }
    DialogMode DialogMode { get; set; }

    DialogResult Result = DialogResult.Undefiend;

    T Item { get; set; }

    bool IsShown = false;
    string animateClassName = "animate__bounceInDown animate__fast";
    string ConfirmButtonText = "Add";

    bool IsAnimating = false;
    string FocusClassName = "";

    public async Task<T> ShowModal(string ModalTitle, DialogMode Mode, string ItemId = null, T Item = default(T))
    {
        this.ModalTitle = ModalTitle;
        DialogMode = Mode;
        this.Item = Item;
        if (Mode == DialogMode.Edit)
        {
            for (int i = 0; i < Properties.Count; i++)
            {
                var prop = typeof(T).GetProperty(Properties[i].Key);
                var value = prop.GetValue(Item);
                Properties[i].DefaultValue = (value is DateTime) ? ((DateTime)prop.GetValue(Item)).ToString("yyyy-MM-dd") : prop.GetValue(Item).ToString();
            }
        }
        else
        {
            for (int i = 0; i < Properties.Count; i++)
            {
                Properties[i].DefaultValue = "";
            }
        }
        ConfirmButtonText = (Mode == DialogMode.Add ? "Add" : "Edit");
        Result = DialogResult.Undefiend;
        IsShown = true;
        StateHasChanged();

        while (Result == DialogResult.Undefiend)
        {
            await Task.Delay(50);
        }

        if (Result == DialogResult.Ok)
        {
            var param = new List<object>();
            if (Mode == DialogMode.Edit)
                param.Add(ItemId);

            for (int i = 0; i < Properties.Count; i++)
            {
                param.Add(Properties[i].DefaultValue);
            }

            //var param = (IdList.Union(from prop in Properties select prop.DefaultValue)).ToArray<object>();

            for (int i = 0; i < param.Count; i++)
            {
                Console.WriteLine($"{i} = {param[i]}");
            }

            T result = (T)Activator.CreateInstance(typeof(T), param.ToArray());

            return result;
        }

        return default(T);

    }

    async Task CloseModal()
    {
        animateClassName = "animate__bounceOut animate__faster";
        await Task.Delay(400);
        IsShown = false;
        animateClassName = "animate__bounceInDown animate__fast";
    }

    async Task Cancel()
    {
        Result = DialogResult.Cancel;
        await CloseModal();
    }

    async Task Confirm()
    {
        Result = DialogResult.Ok;
        await CloseModal();
        //for (int i = 0; i < Properties.Count; i++)
        //{
        //    Console.WriteLine($"{Properties[i].Key} = {Properties[i].DefaultValue}");
        //}
    }

    public async Task FocusModal()
    {
        if (IsAnimating)
            return;
        IsAnimating = true;
        FocusClassName = "animate__tada";
        await Task.Delay(600);
        FocusClassName = "";
        IsAnimating = false;
    }
}
