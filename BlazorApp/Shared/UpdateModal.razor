@typeparam T

<div class="modal-backdrop @(IsShown ? "show" : "d-none")"></div>
<div class="modal @(IsShown ? "show d-block" : "")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg @animateClassName animate__animated" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">@ModalTitle</h5>
                <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger d-none" role="alert">
                    This is a primary alert—check it out!
                </div>
                @for (int i = 0; i < Properties.Count; i += 2)
                {
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <DataInput Item="Properties[i]"></DataInput>
                        </div>

                        @if (i + 1 < Properties.Count)
                        {
                            <div class="col-md-6 mb-3">
                                <DataInput Item="Properties[i + 1]"></DataInput>
                            </div>
                        }
                    </div>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                <button type="button" class="btn btn-primary">@(DialogMode == DialogMode.Add?"Add":"Edit")</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] public List<Property> Properties { get; set; }
    [Parameter] public T ItemType { get; set; }
    string ModalTitle { get; set; }
    DialogMode DialogMode { get; set; }
    T Item { get; set; }

    bool IsShown = false;
    string animateClassName = "animate__bounceInDown animate__fast";

    public void ShowModal(string ModalTitle, DialogMode Mode, T Item = default(T))
    {
        this.ModalTitle = ModalTitle;
        DialogMode = Mode;
        this.Item = Item;
        if (Mode == DialogMode.Edit)
        {
            for (int i = 0; i < Properties.Count; i++)
            {
                var prop = typeof(T).GetProperty(Properties[i].Key);
                var value = prop.GetValue(Item);
                Properties[i].DefaultValue = (value is DateTime) ? ((DateTime)prop.GetValue(Item)).ToString("yyyy-MM-dd") : prop.GetValue(Item).ToString();
            }
        }
        else
        {
            for (int i = 0; i < Properties.Count; i++)
            {
                Properties[i].DefaultValue = "";
            }
        }
        IsShown = true;
        StateHasChanged();
    }

    public async Task CloseModal()
    {
        animateClassName = "animate__bounceOut animate__faster";
        await Task.Delay(400);
        IsShown = false;
        animateClassName = "animate__bounceInDown animate__fast";
    }
}
