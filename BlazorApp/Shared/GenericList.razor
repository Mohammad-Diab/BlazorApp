@typeparam T
@if (EditAbility)
{
    <div class="mt-1 mb-3">
        <button class="btn btn-primary" @onclick="AddItem">
            <span class="oi oi-plus"></span>
            <span>Add</span>
        </button>
    </div>
    <UpdateModal @ref="Modal" ItemType="ItemSample" Properties="ItemProperties"></UpdateModal>
    <ConfirmDialog @ref="ConfirmModal"></ConfirmDialog>
}

@if (ItemsList == null)
{
   <Loading ColumnsCount="7" Type="LoadingContentType.Grid" />
}
else if (ItemsList.Count == 0)
{
    <EmptyList />
}
else
{
    <CascadingValue Value="@this" Name="UpdateModal">
        <table style="table-layout: fixed" class="table mt-4">
            <thead>
                @TableHeader
            </thead>

            <tbody>
                @for (int i = 0; i < ItemsList.Count; i++)
                {
                    int index = i;

                    @ItemRender(ItemsList[i]);
                }
            </tbody>
        </table>
    </CascadingValue>
}
<h3>@Title</h3>

@code {
    [Parameter] public bool EditAbility { get; set; }

    [Parameter] public string ItemType { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public List<T> ItemsList { get; set; }
    [Parameter] public List<Property> ItemProperties { get; set; }

    [Parameter] public RenderFragment TableHeader { get; set; }
    [Parameter] public RenderFragment<T> ItemRender { get; set; }

    T ItemSample = default(T);

    UpdateModal<T> Modal;
    ConfirmDialog ConfirmModal;

    async void AddItem()
    {
        T newItem = await Modal.ShowModal($"Add new {ItemType?.ToLower() ?? "item"}", DialogMode.Add);
        if(newItem != null)
        {
            ItemsList.Add(newItem);
            StateHasChanged();
        }
    }

    public async void EditItem(T Item, string ItemId, string itemName)
    {
        T newItem = await Modal.ShowModal($"Edit '{itemName}'", DialogMode.Edit, ItemId, Item);
        if (newItem != null)
        {
            for (int i = 0; i < ItemProperties.Count; i++)
            {
                var newProp = typeof(T).GetProperty(ItemProperties[i].Key);
                var newValue = newProp.GetValue(newItem);

                var destinationProp = typeof(T).GetProperty(ItemProperties[i].Key);
                destinationProp.SetValue(Item, newValue);
            }
            StateHasChanged();
        }
    }

    public async void DeleteItem(T Item, string itemName)
    {
        DialogResult result = await ConfirmModal.ShowModal($"Deleting {itemName}", $"Do you really want to delete '{itemName}'?", ConfirmType.Delete);
        if (result == DialogResult.Ok)
        {
            Console.WriteLine("Ok");
            ItemsList.Remove(Item);
            StateHasChanged();
        }
    }

}
