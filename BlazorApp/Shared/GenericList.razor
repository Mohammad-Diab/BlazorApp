@typeparam T

@if (EditAbility)
{
    <UpdateModal @ref="Modal" ItemType="ItemSample" Properties="ItemsList?.ItemProperties"></UpdateModal>
    <ConfirmDialog @ref="ConfirmModal"></ConfirmDialog>
}
<div class="mt-1 mb-3 overflow-hidden">
    @if (EditAbility)
    {
        <button class="btn btn-primary" @onclick="ShowAddModal">
            <span class="oi oi-plus"></span>
            <span>Add</span>
        </button>
    }
    <div class="float-right">
        <CascadingValue Value="@this" Name="UpdateModal">
            <FilterInput />
        </CascadingValue>
    </div>
</div>

@if (ItemsList == null)
{
    <LazyContent ItemsPerPage="ItemsPerPage" ColumnsCount="GridColumnsCount" Type="LoadingContentType.Grid" />
}
else if (ItemsList.TotalCount == 0)
{
    <EmptyList Title="@(string.IsNullOrEmpty(FilterString) ? "It's lonely here..." : "No items match your search!")" />
}
else
{
    <CascadingValue Value="@this" Name="UpdateModal">
        <table style="table-layout: fixed" class="table mt-4">
            <thead>
                @TableHeader
            </thead>

            <tbody>
                @for (int i = 0; i < ItemsList.Count; i++)
                {
                    int index = i;

                    @ItemRender(ItemsList[i]);
                }
            </tbody>
        </table>

        <Pagination CurrentPage="ItemsList.CurrentPage" PagesCount="ItemsList.PagesCount" />
    </CascadingValue>
}
<h3>@Title</h3>

@code {

    [Parameter] public string Title { get; set; }
    [Parameter] public int GridColumnsCount { get; set; }
    [Parameter] public int ItemsPerPage { get; set; }

    [Parameter] public GridList<T> ItemsList { get; set; }

    [Parameter] public RenderFragment TableHeader { get; set; }
    [Parameter] public RenderFragment<T> ItemRender { get; set; }

    [CascadingParameter(Name = "LoadingPanal")] public Loading LoadingPanal { get; set; }
    [CascadingParameter(Name = "EditAbility")] public bool EditAbility { get; set; }

    [Parameter] public Func<int, int, string, Task> ActionFunc { get; set; }
    [Parameter] public Func<T, Task> AddItem { get; set; }
    [Parameter] public Func<string, T, Task> EditItem { get; set; }
    [Parameter] public Func<T, Task> DeleteItem { get; set; }

    string FilterString { get; set; } = "";

    T ItemSample = default(T);

    UpdateModal<T> Modal;
    ConfirmDialog ConfirmModal;

    async void ShowAddModal()
    {
        var result = await Modal.ShowModal($"Add new {ItemsList?.ItemsType?.ToLower() ?? "item"}", DialogMode.Add);
        if (result.ModalResult == DialogResult.Ok && result.NewItem != null)
        {
            await AddItem(result.NewItem);
        }
    }

    public async void ShowEditModal(T Item, string ItemId, string itemName)
    {
        var result = await Modal.ShowModal($"Edit '{itemName}'", DialogMode.Edit, ItemId, Item);
        if (result.ModalResult == DialogResult.Ok && result.NewItem != null)
        {
            await EditItem(ItemId, result.NewItem);
        }
    }

    public async void ShowDeleteModal(T Item, string itemName)
    {
        DialogResult result = await ConfirmModal.ShowModal($"Deleting {itemName}", $"Do you really want to delete '{itemName}'?", ConfirmType.Delete);
        if (result == DialogResult.Ok)
        {
            await DeleteItem(Item);
        }
    }

    public async void Sort(int SortBy)
    {
        if (SortBy == Math.Abs(ItemsList.SortedBy))
        {
            SortBy = -ItemsList.SortedBy;
        }
        await ActionFunc(ItemsList.CurrentPage, SortBy, FilterString);
    }

    public async void GoToPage(int PageNumber)
    {
        PageNumber = PageNumber < 1 ? 1 : PageNumber;
        PageNumber = PageNumber > ItemsList.PagesCount ? ItemsList.PagesCount : PageNumber;
        await ActionFunc(PageNumber, ItemsList.SortedBy, FilterString);
    }

    public async Task Filter(string filterString)
    {
        FilterString = filterString;
        await ActionFunc(1, ItemsList.SortedBy, FilterString);
    }

}
