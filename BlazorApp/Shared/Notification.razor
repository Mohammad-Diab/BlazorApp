<div class="alert alert-@GetNotificationTypeClass() @(IsDismissible ? "alert-dismissible" : "") @(isVisible ? "show" : "d-none") animate__animated animate__faster @animationClass" role="alert">
    <div>
        @if (!string.IsNullOrEmpty(Title))
        {
            <h4 class="alert-heading">@((MarkupString)Title)</h4>
        }

        <p class="my-0">@Description</p>

        @if (!string.IsNullOrEmpty(ExtraInfo))
        {
            <hr class="my-2">
            <p class="mb-0">@((MarkupString)ExtraInfo)</p>
        }

    </div>

    @if (IsDismissible)
    {
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="Hide">
            <span aria-hidden="true">&times;</span>
        </button>
    }

</div>

@code {
    [Parameter] public int Timeout { get; set; }

    public bool IsDismissible { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string ExtraInfo { get; set; }
    public NotificationType Type { get; set; }

    bool isVisible = false;
    string animationClass = "animate__fadeIn";

    protected override void OnInitialized()
    {
        Timeout = Timeout < 1000 ? 1000 : Timeout;
    }

    string GetNotificationTypeClass() =>
        Type switch
        {
            NotificationType.Info => "primary",
            NotificationType.Success => "success",
            NotificationType.Warning => "warning",
            NotificationType.Error => "danger",
            _ => "primary"
        };

    public async void Show(NotificationType Type, string Description, bool IsDismissible = true, string Title = "", string ExtraInfo = "")
    {
        this.Type = Type;
        this.Description = Description;
        this.Title = Title;
        this.ExtraInfo = ExtraInfo;
        this.IsDismissible = IsDismissible;

        animationClass = "animate__fadeIn";

        isVisible = true;
        StateHasChanged();
        if (!IsDismissible)
        {
            await Task.Delay(Timeout);
            Hide();
        }
    }

    public async void Hide()
    {
        animationClass = "animate__fadeOut";
        StateHasChanged();
        await Task.Delay(350);
        isVisible = false;
        StateHasChanged();
    }

}
