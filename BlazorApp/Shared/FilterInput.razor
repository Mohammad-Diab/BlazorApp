@using System.Timers;

<div class="input-group">
    <input class="form-control my-0 py-1" type="text" placeholder="Filter..." @bind="FilterString" aria-label="Search" @bind:event="oninput">
    <div class="input-group-append">
        <span class="input-group-text">
            <i class="oi oi-magnifying-glass" aria-hidden="true"></i>
        </span>
    </div>
</div>

@code {
    /// <summary>
    /// Reference to the parent Grid.
    /// </summary>
    [CascadingParameter(Name = "UpdateModal")] public GenericList<User> Parent { get; set; }

    // Current and previous filtering string.
    string filterString, lastFilterString = "";

    /// <summary>
    /// Current value in the input text. This allows us to do some actions when text changed and binded.
    /// </summary>
    string FilterString {
        get
        {
            return filterString;
        }
        set
        {
            filterString = value;

            // Trigger text changed event.
            TextChanged();
        }
    }

    // Timer to hold back request to server by adding a few milliseconds of delay.
    Timer filterTimer;

    /// <summary>
    /// Function triggers after Initializing the component.
    /// </summary>
    protected override void OnInitialized()
    {
        // Initializ filter timer.
        filterTimer = new Timer();
        filterTimer.Interval = 300;
        filterTimer.AutoReset = false;
        filterTimer.Elapsed += (object sender, ElapsedEventArgs args) => {
            Search();
        };
    }

    /// <summary>
    /// Start filtering's timer.
    /// </summary>
    void TextChanged()
    {
        // Stop previous Timer.
        filterTimer?.Stop();

        // Start the timer if text typed fulfill the conditions.
        if (lastFilterString?.ToLower() != FilterString?.ToLower())
        {
            filterTimer?.Start();
        }
    }

    /// <summary>
    /// Triggered after changing text and timer ticking.
    /// </summary>
    async void Search()
    {
        // If current text matches previous text just keep previous result.
        if (lastFilterString?.ToLower() != FilterString?.ToLower())
        {
            lastFilterString = FilterString;
            await Parent.Filter(FilterString);
        }
    }

    /// <summary>
    /// Event triggers when component being dispose.
    /// </summary>
    void Dispose()
    {
        // Dispose timers after the component being dispose.
        filterTimer?.Dispose();
    }
}
