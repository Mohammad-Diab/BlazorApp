@if (Parent.ItemsList != null)
{
    <tr>
        @if (Parent.EditAbility || Parent.GridType == GridType.Select)
        {
            <th class="align-middle" scope="col" style="width: 40px;">
                <div title="Select all" class="custom-control custom-checkbox d-none">
                    @*<input type="checkbox" class="custom-control-input @(Parent.SelectAllValue.HasValue ? (Parent.SelectAllValue.Value ? "checked" : "") : "indeterminate")" @onchange="(arg) => { Parent.SelectAllValue = (bool)arg.Value; Parent.SelectAll(); }" id="check-user-row-all" />*@
                    <input type="checkbox" class="custom-control-input" id="check-user-row-all" />
                    <label class="custom-control-label" for="check-user-row-all"></label>
                </div>
            </th>
        }
        @for (int i = 0; i < Headers.Count; i++)
        {
            int index = i + 1;
            <th style="cursor: pointer;" @onclick="() => { Parent.Sort(index); }">
                <div class="btn-link pl-1">
                    @if (Math.Abs(Parent.ItemsList.SortedBy) == index)
                    {
                        <span class="oi align-middle oi-sort-@(Parent.ItemsList.SortedBy > -1 ? "ascending" : "descending")"></span>
                    }
                    @Headers[i]
                </div>
            </th>
        }
        @if (Parent.GridType == GridType.Edit)
        {
            <th>
                <a class="btn-link">Actions</a>
            </th>
        }

    </tr>
}
@code {
    [Parameter] public List<string> Headers { get; set; }
    [CascadingParameter(Name = "UpdateModal")] public GenericList<User> Parent { get; set; }

}
