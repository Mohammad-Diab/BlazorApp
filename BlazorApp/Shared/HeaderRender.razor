@if (Parent.ItemsList != null)
{
    <tr>
        @if (Parent.EditAbility || Parent.GridType != GridType.Edit)
        {
        <th class="align-middle" scope="col" style="width: 40px;">
            @if ((Parent.EditAbility && Parent.GridType == GridType.Edit) || Parent.GridType == GridType.MultiSelect)
            {
                <div title="Select all" class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input @SelectState" @bind="IsChecked" id="check-all-@checkboxId" />
                    <label class="custom-control-label" for="check-all-@checkboxId"></label>
                </div>
            }
        </th>
        }
        @for (int i = 0; i < Headers.Count; i++)
        {
            int index = i + 1;
            <th style="cursor: pointer;" @onclick="() => { Parent.Sort(index); }">
                <div class="btn-link pl-1">
                    @if (Math.Abs(Parent.ItemsList.SortedBy) == index)
                    {
                        <span class="oi align-middle oi-sort-@(Parent.ItemsList.SortedBy > -1 ? "ascending" : "descending")"></span>
                    }
                    @Headers[i]
                </div>
            </th>
        }
        @if (Parent.GridType == GridType.Edit)
        {
            <th>
                <a class="btn-link">Actions</a>
            </th>
        }

    </tr>
}
@code {
    /// <summary>
    /// List of headers of the grid.
    /// </summary>
    [Parameter] public List<string> Headers { get; set; }

    /// <summary>
    ///  Reference to the parent Grid.
    /// </summary>
    [CascadingParameter(Name = "UpdateModal")] public GenericList<User> Parent { get; set; }

    // HTML static Id for the select all checkbox.
    string checkboxId = Guid.NewGuid().ToString();

    bool isChecked = false;

    /// <summary>
    /// Select all checkbox value whether it's selected or not. This allows us to do some actions when text changed and binded.
    /// </summary>
    bool IsChecked
    {
        get
        {
            return isChecked;
        }
        set
        {
            isChecked = !isChecked;

            // Call parent select all function.
            Parent.SelectAll(isChecked);
        }
    }

    /// <summary>
    /// Get checkbox classes depend on select state.
    /// </summary>
    public string SelectState
    {
        get
        {
            // Read select state from parent.
            SelectedStatus status = Parent.SelectStatus;

            // Set isChecked value depend on parent state.
            isChecked = !(status == SelectedStatus.None || status == SelectedStatus.Some);

            // return checkbox classes.
            return status switch
            {
                SelectedStatus.None => "",
                SelectedStatus.All => "checked",
                SelectedStatus.Some => "indeterminate",
                _ => ""
            };
        }
    }

}
